import { NextRequest, NextResponse } from 'next/server'
import bcrypt from 'bcryptjs'
import prisma from '@/lib/prisma'

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Iniciando registro de usu√°rio...')
    
    const body = await request.json()
    console.log('üìù Dados recebidos:', { ...body, password: '***' })
    
    const { name, email, password } = body

    if (!name || !email || !password) {
      console.log('‚ùå Dados incompletos')
      return NextResponse.json(
        { error: 'Nome, email e senha s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }

    console.log('üîç Verificando se usu√°rio j√° existe...')
    // Verificar se o usu√°rio j√° existe
    const existingUser = await prisma.user.findUnique({
      where: { email }
    })

    if (existingUser) {
      console.log('‚ùå Usu√°rio j√° existe')
      return NextResponse.json(
        { error: 'Usu√°rio j√° existe com este email' },
        { status: 400 }
      )
    }

    console.log('üîê Gerando hash da senha...')
    // Hash da senha
    const hashedPassword = await bcrypt.hash(password, 12)

    console.log('üë§ Criando usu√°rio no banco...')
    // Criar usu√°rio (sem email verificado)
    const user = await prisma.user.create({
      data: {
        name,
        email,
        password: hashedPassword,
        emailVerified: null, // N√£o verificado inicialmente
      }
    })

    console.log('‚úÖ Usu√°rio criado:', user.id)

    // Enviar c√≥digo de verifica√ß√£o
    console.log('üìß Enviando c√≥digo de verifica√ß√£o...')
    try {
      const verificationResponse = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/auth/send-verification`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: user.email,
          userId: user.id,
        }),
      })

      if (!verificationResponse.ok) {
        console.error('‚ùå Erro ao enviar c√≥digo de verifica√ß√£o:', verificationResponse.status)
      } else {
        console.log('‚úÖ C√≥digo de verifica√ß√£o enviado')
      }
    } catch (error) {
      console.error('‚ùå Erro ao enviar c√≥digo de verifica√ß√£o:', error)
    }

    console.log('üéâ Registro conclu√≠do com sucesso')
    return NextResponse.json(
      { 
        message: 'Usu√°rio criado com sucesso. Verifique seu email para ativar a conta.',
        userId: user.id,
        requiresVerification: true
      },
      { status: 201 }
    )
  } catch (error) {
    console.error('üí• Erro ao criar usu√°rio:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
} 